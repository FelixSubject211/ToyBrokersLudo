[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\minef\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\minef\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.2 (Oracle Corporation Java 17.0.2)
[debug]       Load.loadUnit: plugins took 160.6546ms
[debug]       Load.loadUnit: defsScala took 0.5098ms
[debug] [Loading] Scanning directory C:\Users\minef\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\minef\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 27.3998 ms
[debug]           Load.resolveProject(global-plugins) took 58.2676ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\minef\.sbt\1.0\plugins, plugins: List(<none>))) took 110.8205ms
[debug] [Loading] Done in C:\Users\minef\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 150.7462ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3229ms
[debug]     Load.loadUnit(file:/C:/Users/minef/.sbt/1.0/plugins/, ...) took 327.5624ms
[debug]   Load.apply: load took 632.14ms
[debug]   Load.apply: resolveProjects took 8.0934ms
[debug]   Load.apply: finalTransforms took 101.0355ms
[debug]   Load.apply: config.delegates took 14.8487ms
[debug]   Load.apply: Def.make(settings)... took 522.0148ms
[debug]   Load.apply: structureIndex took 140.0157ms
[debug]   Load.apply: mkStreams took 1.2332ms
[info] loading global plugins from C:\Users\minef\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6822.1042ms
[debug]           Load.loadUnit: plugins took 25.1756ms
[debug]           Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\minef\IdeaProjects\ToyBrokersLudo\project
[debug]             Load.loadUnit: mkEval took 5.4879ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\minef\IdeaProjects\ToyBrokersLudo\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.1761 ms
[info] loading settings for project toybrokersludo-build from idea.sbt ...
[debug]               Load.resolveProject(toybrokersludo-build) took 2.0594ms
[debug]             Load.loadTransitive: finalizeProject(Project(id toybrokersludo-build, base: C:\Users\minef\IdeaProjects\ToyBrokersLudo\project, plugins: List(<none>))) took 3.6128ms
[debug] [Loading] Done in C:\Users\minef\IdeaProjects\ToyBrokersLudo\project, returning: (toybrokersludo-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2794.0171ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.5564ms
[debug]         Load.loadUnit(file:/C:/Users/minef/IdeaProjects/ToyBrokersLudo/project/, ...) took 2824.771ms
[debug]       Load.apply: load took 2826.7324ms
[debug]       Load.apply: resolveProjects took 0.1237ms
[debug]       Load.apply: finalTransforms took 10.6846ms
[debug]       Load.apply: config.delegates took 0.3387ms
[debug]       Load.apply: Def.make(settings)... took 95.5959ms
[debug]       Load.apply: structureIndex took 39.2095ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from C:\Users\minef\IdeaProjects\ToyBrokersLudo\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4068.9788ms
[debug]     Load.loadUnit: defsScala took 0.0039ms
[debug] [Loading] Scanning directory C:\Users\minef\IdeaProjects\ToyBrokersLudo
[debug]       Load.loadUnit: mkEval took 0.3531ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.4224 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 32.2698ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\minef\IdeaProjects\ToyBrokersLudo, plugins: List(<none>))) took 36.6171ms
[debug] [Loading] Done in C:\Users\minef\IdeaProjects\ToyBrokersLudo, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1657.0741ms
[debug]     Load.loadUnit: cleanEvalClasses took 19.0081ms
[debug]   Load.loadUnit(file:/C:/Users/minef/IdeaProjects/ToyBrokersLudo/, ...) took 5746.0438ms
[debug] Load.apply: load took 5748.0403ms
[debug] Load.apply: resolveProjects took 0.1016ms
[debug] Load.apply: finalTransforms took 39.5252ms
[debug] Load.apply: config.delegates took 0.4374ms
[debug] Load.apply: Def.make(settings)... took 66.9385ms
[debug] Load.apply: structureIndex took 21.1072ms
[debug] Load.apply: mkStreams took 0.0023ms
[info] set current project to ToyBrokersLudo (in build file:/C:/Users/minef/IdeaProjects/ToyBrokersLudo/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52671 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52671, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ToyBrokersLudo (in build file:/C:/Users/minef/IdeaProjects/ToyBrokersLudo/)
[debug] > Exec(idea-shell, None, None)
